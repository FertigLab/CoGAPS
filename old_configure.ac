# GOALS
# 1) support building in debug mode
# 2) support simd flags selection

# get version of CoGAPS from DESCRIPTION file
AC_INIT(CoGAPS, m4_esyscmd_s([awk -e '/^Version:/ {print $2}' Repo/DESCRIPTION]))

# get C++ compiler from R configuration
CXX=`"${R_HOME}/bin/R" CMD config CXX`

# Switch to a C++ compiler, and check if it works.
AC_LANG(C++)
AC_REQUIRE_CPP
AC_PROG_CXX

# macro to check if compile flag throws error
AC_DEFUN([AX_CHECK_COMPILE_FLAG],
[AC_PREREQ(2.64)dnl for _AC_LANG_PREFIX and AS_VAR_IF
AS_VAR_PUSHDEF([CACHEVAR],[ax_cv_check_[]_AC_LANG_ABBREV[]flags_$4_$1])dnl
AC_CACHE_CHECK([whether _AC_LANG compiler accepts $1], CACHEVAR, [
  ax_check_save_flags=$[]_AC_LANG_PREFIX[]FLAGS
  _AC_LANG_PREFIX[]FLAGS="$[]_AC_LANG_PREFIX[]FLAGS $4 $1"
  AC_COMPILE_IFELSE([m4_default([$5],[AC_LANG_PROGRAM()])],
    [AS_VAR_SET(CACHEVAR,[yes])],
    [AS_VAR_SET(CACHEVAR,[no])])
  _AC_LANG_PREFIX[]FLAGS=$ax_check_save_flags])
AS_VAR_IF(CACHEVAR,yes,
  [m4_default([$2], :)],
  [m4_default([$3], :)])
AS_VAR_POPDEF([CACHEVAR])dnl
])dnl AX_CHECK_COMPILE_FLAGS

AX_CHECK_COMPILE_FLAG([-msse4.2], [SIMD_FLAGS+=" -msse4.2 "])
AX_CHECK_COMPILE_FLAG([-mavx], [SIMD_FLAGS+=" -mavx "])
AX_CHECK_COMPILE_FLAG([-mavx512f], [SIMD_FLAGS+=" -mavx512f "])

# determine active compiler, TODO cite Score-P
vendors="intel:     __ICC,__ECC,__INTEL_COMPILER
         ibm:       __xlc__,__xlC__,__IBMC__,__IBMCPP__
         pathscale: __PATHCC__,__PATHSCALE__
         clang:     __clang__
         cray:      _CRAYC
         fujitsu:   __FUJITSU
         gnu:       __GNUC__
         sun:       __SUNPRO_C,__SUNPRO_CC
         hp:        __HP_cc,__HP_aCC
         dec:       __DECC,__DECCXX,__DECC_VER,__DECCXX_VER
         borland:   __BORLANDC__,__CODEGEARC__,__TURBOC__
         comeau:    __COMO__
         kai:       __KCC
         lcc:       __LCC__
         sgi:       __sgi,sgi
         microsoft: _MSC_VER
         metrowerks: __MWERKS__
         watcom:    __WATCOMC__
         portland:  __PGI
         tcc:       __TINYC__
         unknown:   UNKNOWN"

for ventest in $vendors; do
    case $ventest in
        *:) vendor=$ventest; continue ;;
        *)  vencpp="defined("`echo $ventest | sed 's/,/) || defined(/g'`")" ;;
    esac
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,[
        #if !($vencpp)
            thisisanerror;
        #endif
    ])], [break])
done
#compiler_vendor=`echo $vendor | cut -d: -f1`

# get compiler version
# if test "x$compiler_vendor" = "xclang" ; then
# elif test "x$compiler_vendor" = "xgnu" ; then
# else
# fi

#echo "$compiler_version"

# Check if compiling debug version
AC_ARG_ENABLE(debug, [AC_HELP_STRING([--enable-debug],
    [build debug version of CoGAPS])], [build_debug=yes], [build_debug=no])

# Check if specific version of SIMD instructions requested
#AC_ARG_ENABLE(simd, [AC_HELP_STRING([--enable-simd], [specify simd instruction set (sse, avx, avx512)])], [simd_version=$enableval], [simd_version=sse])

# Check if compiler supports openmp
# TODO

GAPS_CPP_FLAGS=
GAPS_CXX_FLAGS=" -msse4.2 -mavx "

if test "x$build_debug" = "xyes" ; then
    echo "Building Debug Version of CoGAPS"
    GAPS_CPP_FLAGS+=" -DGAPS_DEBUG "
fi

#if test "x$simd_version" = "xsse" ; then
#    echo "Using SSE"
#    GAPS_CXX_FLAGS+=" -msse4.2 "
#elif test "x$simd_version" = "xavx" ; then
#    echo "Using AVX"
#    GAPS_CXX_FLAGS+=" -mavx "
#elif test "x$simd_version" = "xavx512" ; then
#    echo "Using AVX-512"
#    GAPS_CXX_FLAGS+=" -mavx512f "
#else
#    echo "Error: Invalid SIMD type"
#    exit -1
#fi

# AC_CONFIG_MACRO_DIR([autoconf-archive/m4])
# m4_include([autoconf-archive/m4/ax_gcc_x86_cpuid.m4])
# m4_include([autoconf-archive/m4/ax_gcc_x86_avx_xgetbv.m4])
# m4_include([autoconf-archive/m4/ax_ext.m4])

# AX_EXT

#echo "x$SIMD_FLAGS"

# CXXFLAGS=" -mavx512f "
# AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include <x86intrin.h>],[
#     volatile f = 3.f;
#     volatile __m512 packedF;
#     packedF(_mm512_set1_ps(f));
# ])], [], [exit -1])


AC_SUBST(GAPS_CPP_FLAGS)
AC_SUBST(GAPS_CXX_FLAGS)

AC_CONFIG_FILES([src/Makevars])
AC_OUTPUT

